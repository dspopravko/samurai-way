{"version":3,"file":"static/js/433.22b76598.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/MessageForm/MessageForm.module.css?2a5f","components/MessageForm/MessageForm.tsx","hook/withAuthRedirect.tsx","webpack://samurai-way/./src/pages/messages/Dialogs.module.css?490e","webpack://samurai-way/./src/features/Dialogs/Chats/Chats.module.css?a006","features/Dialogs/Chats/Chats.tsx","webpack://samurai-way/./src/features/Dialogs/Messages/Messages.module.css?106d","webpack://samurai-way/./src/features/Dialogs/Messages/Message/Message.module.css?7abc","features/Dialogs/Messages/Message/Message.tsx","features/Dialogs/Messages/Messages.tsx","webpack://samurai-way/./src/features/Dialogs/Dialog/Dialog.module.css?5c81","features/Dialogs/Dialog/Dialog.tsx","pages/messages/DialogsContainer.tsx","pages/messages/Dialogs.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"MessageForm_form__UoSo9\"};","import {Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport s from \"./MessageForm.module.css\"\r\n\r\nexport interface FormDataType {\r\n    messageText: string\r\n}\r\n\r\ninterface SendMessageFormInterface {\r\n    initialValue?: string\r\n    placeholder?: string\r\n    onSubmit: (data: FormDataType) => void\r\n}\r\n\r\nexport const SendMessageForm = (props: SendMessageFormInterface) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                messageText: props.initialValue || ''\r\n            }}\r\n            onSubmit={( values: FormDataType, {resetForm} ) => {\r\n                props.onSubmit(values)\r\n                resetForm()\r\n            }}\r\n        >\r\n            <Form className={s.form}>\r\n                <textarea id=\"messageText\" name=\"messageText\" placeholder={props.placeholder} />\r\n                <button type=\"submit\">Send</button>\r\n            </Form>\r\n        </Formik>\r\n    )\r\n}","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {ReduxStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ninterface WithAuthProps { isAuth: boolean }\r\n\r\nconst mapStateToPropsAuth = ({authReducer}: ReduxStateType): WithAuthProps => {\r\n    return { isAuth: authReducer.isAuth }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: WithAuthProps) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    return connect(mapStateToPropsAuth)(RedirectComponent)\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogsWrapper\":\"Dialogs_dialogsWrapper__LZQ2o\",\"chats\":\"Dialogs_chats__T3M3L\",\"messagesPage\":\"Dialogs_messagesPage__bC8iD\",\"message\":\"Dialogs_message__hrUP8\",\"active\":\"Dialogs_active__gxnTb\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Chats_message__YqaPj\",\"messageActive\":\"Chats_messageActive__mf5lH\",\"chat\":\"Chats_chat__jyiah\",\"date\":\"Chats_date__4-V6y\",\"logo\":\"Chats_logo__ZoBKy\"};","import React from \"react\";\r\nimport s from \"./Chats.module.css\"\r\nimport {NavLink, useLocation} from \"react-router-dom\";\r\nimport {ChatHeaderType} from \"../../../redux/chats-reducer\";\r\n\r\nexport type ChatsPropsType = {\r\n    chatHeader: ChatHeaderType\r\n}\r\n\r\nexport default function Chats( {chatHeader} : ChatsPropsType ) {\r\n    let path = \"/messages/\" + chatHeader.id\r\n    const isActive = path === useLocation().pathname? s.messageActive : s.message\r\n    return (\r\n        <NavLink to={path}>\r\n            <div className={isActive}>\r\n                <div className={s.logo}>\r\n                    <img alt={`Chat logo ${chatHeader.author}`} src={chatHeader.chatLogo}/>\r\n                </div>\r\n                <div className={s.chat}>\r\n                    <pre>{chatHeader.author.slice(0,8) + \"..\"}</pre>\r\n                    <div className={s.date}>\r\n                        {chatHeader.date}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </NavLink>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Messages_message__b3hWg\"};","// extracted by mini-css-extract-plugin\nexport default {\"message_container\":\"Message_message_container__hJF+n\",\"myMessage_container\":\"Message_myMessage_container__TS9ZF\",\"message\":\"Message_message__Pqczt\",\"myMessage\":\"Message_myMessage__f0wBN\",\"avatar_container\":\"Message_avatar_container__XqbOp\",\"time_container\":\"Message_time_container__Uj9U7\",\"text\":\"Message_text__cEwYx\",\"time\":\"Message_time__NNARB\",\"name\":\"Message_name__-pf8K\",\"svgWrapper\":\"Message_svgWrapper__Q3hXd\",\"mySvgWrapper\":\"Message_mySvgWrapper__rO3d9\"};","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\nimport logo from \"../../../../assets/img/defaultUser.png\";\r\n\r\nexport type MessagePropsType = {\r\n    id: number\r\n    authorId: number\r\n    avatar: string | null\r\n    name: string\r\n    message: string\r\n    date: string\r\n}\r\n\r\nexport const Message = ({\r\n                            authorId,\r\n                            avatar = \"https://180dc.org/wp-content/uploads/2022/04/Blank-Avatar.png\",\r\n                            name,\r\n                            message,\r\n                            date,\r\n                        }:\r\n                            MessagePropsType\r\n) => {\r\n    return <>\r\n        <div className={authorId === 0 ? s.myMessage : s.message}>\r\n            <div className={s.avatar_container}>\r\n                <img alt=\"avatar\" src={avatar || logo}/>\r\n            </div>\r\n            <div className={authorId === 0 ? s.mySvgWrapper : s.svgWrapper}>\r\n                <svg viewBox=\"0 0 100 100\">\r\n                    <path\r\n                        d=\"M100,0v100H18.2c0.3-1.2,3.6-1.8,13.6-5.2c14.8-5,28.1-13.3,38.9-24.1C88.8,52.6,100,27.6,100,0z\"/>\r\n                </svg>\r\n            </div>\r\n            <div className={authorId === 0 ? s.myMessage_container : s.message_container}>\r\n                <div className={s.name}>\r\n                    {name}\r\n                </div>\r\n                <div className={s.body_container}>\r\n                    <div className={s.text_wrapper}>\r\n                        <p className={s.text}>{message}</p>\r\n                    </div>\r\n                    <div className={s.time_container}>\r\n                        <div className={s.time}>{date}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>\r\n}","import React from \"react\";\r\nimport s from \"./Messages.module.css\"\r\nimport {Message} from \"./Message/Message\";\r\nimport {ChatType} from \"../../../redux/chats-reducer\";\r\n\r\n\r\nexport default function Messages(props: ChatType) {\r\n\r\n    return <div className={s.message}>\r\n        {props.chatMessages.map((m, index) => {\r\n            return <Message key={index}\r\n                id={m.id}\r\n                authorId={m.authorId}\r\n                avatar={m.avatar}\r\n                name={m.name}\r\n                message={m.body}\r\n                date={m.date}\r\n            />\r\n        })}\r\n    </div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"chatWrapper\":\"Dialog_chatWrapper__Y7pO9\",\"inputWrapper\":\"Dialog_inputWrapper__98A5D\"};","import React from \"react\";\r\nimport Messages from \"../Messages/Messages\";\r\nimport s from \"./Dialog.module.css\";\r\nimport {ChatType} from \"../../../redux/chats-reducer\";\r\nimport {FormDataType, SendMessageForm} from \"../../../components/MessageForm/MessageForm\";\r\n\r\ntype DialogType = {\r\n    chat: ChatType\r\n    sendMessageHandler: (index: number, message: string) => void\r\n}\r\n\r\nexport const Dialog = ({chat, sendMessageHandler}: DialogType) => {\r\n    const onSubmitMessageForm = (form: FormDataType) => {\r\n        sendMessageHandler(chat.chatHeader.id, form.messageText)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.chatWrapper}>\r\n                <Messages key={chat.chatHeader.id}\r\n                          chatMessages={chat.chatMessages}\r\n                          chatHeader={chat.chatHeader}\r\n                          chatNewMessage={chat.chatNewMessage}\r\n                />\r\n            </div>\r\n            <SendMessageForm\r\n                placeholder={'Write a message...'}\r\n                onSubmit={onSubmitMessageForm}\r\n            />\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport {ReduxStateType} from \"../../redux/redux-store\";\r\nimport {ChatType, sendMessageAC, updateNewMessageAC} from \"../../redux/chats-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {withAuthRedirect} from \"../../hook/withAuthRedirect\";\r\n\r\ntype MapStateToPropsType = {\r\n    chats: ChatType[]\r\n    profile: ProfileType\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    inputHandler: (input: string, chatId: number) => void\r\n    sendMessageCallback: (index: number, avatar: string | null, name: string, messageText: string) => void\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: ReduxStateType): MapStateToPropsType => ({\r\n    chats: state.chatsReducer,\r\n    profile: state.profileReducer.profile,\r\n    isAuth: state.authReducer.isAuth\r\n})\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        inputHandler: (input: string, chatId: number) => dispatch(updateNewMessageAC(input, chatId)),\r\n        sendMessageCallback: (index: number, avatar: string | null, name: string, messageText: string) => dispatch(sendMessageAC(index, avatar, name, messageText))\r\n    }\r\n}\r\n\r\nconst AuthRedirectComponent = withAuthRedirect(Dialogs)\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport Chats from \"../../features/Dialogs/Chats/Chats\";\r\nimport {Route} from \"react-router-dom\";\r\nimport {Dialog} from \"../../features/Dialogs/Dialog/Dialog\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\n\r\nexport const Dialogs = ({chats, sendMessageCallback, profile}: DialogsPropsType) => {\r\n    const sendMessageHandler = (index: number, messageText: string) => {\r\n        const photo = profile.photos.small ? profile.photos.small : null\r\n        sendMessageCallback(index, photo, profile.fullName, messageText)\r\n    }\r\n\r\n    const chatHeaderItems = chats.map((chat, index) => <Chats key={index} chatHeader={chat.chatHeader}/>)\r\n\r\n    const chatItems = chats.map((chat, index) => {\r\n        return <Route key={index}\r\n                      path={`/messages/${index}`}\r\n                      render={() => (\r\n                          <Dialog\r\n                              chat={chat}\r\n                              sendMessageHandler={sendMessageHandler}\r\n                          />)\r\n                      }/>\r\n    })\r\n\r\n    return (\r\n        <div className={s.dialogsWrapper}>\r\n            <div className={s.chats}>\r\n                {chatHeaderItems}\r\n            </div>\r\n            <div className={s.messagesPage}>\r\n                <div className={s.message}>\r\n                    {chatItems}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["SendMessageForm","props","initialValues","messageText","initialValue","onSubmit","values","resetForm","className","s","id","name","placeholder","type","mapStateToPropsAuth","isAuth","authReducer","withAuthRedirect","Component","connect","restProps","to","Chats","chatHeader","path","isActive","useLocation","pathname","alt","author","src","chatLogo","slice","date","Message","authorId","avatar","message","logo","viewBox","d","Messages","chatMessages","map","m","index","body","Dialog","chat","sendMessageHandler","chatNewMessage","form","AuthRedirectComponent","chats","sendMessageCallback","profile","photo","photos","small","fullName","chatHeaderItems","chatItems","render","state","chatsReducer","profileReducer","dispatch","inputHandler","input","chatId","updateNewMessageAC","sendMessageAC","_objectWithoutProperties","source","excluded","key","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}